
package com.ps.interfaces;

import com.ps.model.Order;
import com.ps.model.OrderLine;
import com.ps.model.Item;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import com.ps.app.ObjectMapper;
import com.ps.model.Delivery;
import com.ps.model.SetOfDeliveries;
import com.ps.model.SetOfOrders;
import java.awt.Dimension;

/**
 * User interface for displaying the delivery
 * details. This is made up of 2 separate 
 * JPanels which provide 2 views. The first
 * view is of the current list of deliveries.
 * The second view is a particular delivery based
 * on the user selection. This 
 * @author JCollinge
 */
public class DeliveryUI extends UserInterface {

    private static DeliveryUI singleton;
    
    private SetOfOrders orders;
    private DefaultListModel<Order> ordersModel;
    private DefaultListModel<Item> orderModel;
    private HashMap<Integer, JCheckBox> checkBoxes;
    
    private Delivery delivery;
    
    private boolean siteFiltered = false;
    private boolean dateFiltered = false;
    private boolean supplierFiltered = false;
    private boolean ascending = true;
    private boolean ascending1 = true;
    
    /**
     * Creates new form DeliveryUI
     */
    private DeliveryUI() {
        ordersModel =  new DefaultListModel();
        orderModel = new DefaultListModel();
        
        delivery = new Delivery();     
        
        initComponents();
        
        //this.setSize(400, 540); // change JFRAME size
        jLayeredPane1.setPreferredSize(new Dimension(400, 540)); // change layered pane size
        
        checkBoxes = new HashMap<Integer, JCheckBox>();
        
        activeOrdersOnlyBtn.setSelected(true);
        
        //Settings
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    /**
     * Lazy load and get singleton instance
     * @return DeliveryUI singleton instance
     */
    public static DeliveryUI getInstance() {
        if(singleton == null) {
            singleton = new DeliveryUI();
        }
        return singleton;
    }
    
    /**
     * Refresh the orders model
     */
     public void refreshOrdersModel() {
        orders = SetOfOrders.getInstance();
        
        ordersModel.clear();
        for(Order order : orders.getAllOrders()) {
            ordersModel.addElement(order);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        deliveriesPanel = new javax.swing.JPanel();
        deliveriesPanelTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        locationTextField = new javax.swing.JTextField();
        supplierTextField = new javax.swing.JTextField();
        filterBySiteBtn = new javax.swing.JToggleButton();
        dateTextField = new javax.swing.JTextField();
        filterByDateBtn = new javax.swing.JToggleButton();
        filterBySupplierBtn = new javax.swing.JToggleButton();
        ascendBtn = new javax.swing.JToggleButton();
        activeOrdersOnlyBtn = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        matchingExistingOrders = new javax.swing.JList();
        returnToMainMenuBtn = new javax.swing.JButton();
        descendBtn = new javax.swing.JToggleButton();
        deliveryPanel = new javax.swing.JPanel();
        deliveryPanelTitle = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        currentUserLabel = new javax.swing.JLabel();
        currentDateLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        currentDateText = new javax.swing.JLabel();
        currentUserText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ascendBtn1 = new javax.swing.JToggleButton();
        descendBtn1 = new javax.swing.JToggleButton();
        orderNotesLabel = new javax.swing.JLabel();
        orderDateLabel = new javax.swing.JLabel();
        ETADeliveryLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        deliveryItemList = new javax.swing.JList();
        deliveryStatusLabel = new javax.swing.JLabel();
        confirmBtn = new javax.swing.JButton();
        dateVerifiedLabel = new javax.swing.JLabel();
        returnToDeliveriesBtn = new javax.swing.JButton();
        orderNotesValue = new javax.swing.JLabel();
        orderDateValue = new javax.swing.JLabel();
        ETADeliveryValue = new javax.swing.JLabel();
        deliveryStatusField = new javax.swing.JTextField();
        dateVerifiedValue = new javax.swing.JLabel();
        finishBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(400, 540));
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(400, 540));

        deliveriesPanel.setMaximumSize(new java.awt.Dimension(400, 540));
        deliveriesPanel.setMinimumSize(new java.awt.Dimension(400, 540));
        deliveriesPanel.setPreferredSize(new java.awt.Dimension(400, 540));

        deliveriesPanelTitle.setText("Viewing Possible Orders - Filtered by");

        locationTextField.setText("Sheffield S1");
        locationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTextFieldActionPerformed(evt);
            }
        });

        supplierTextField.setText("Type here");

        filterBySiteBtn.setText("Site Filtered");
        filterBySiteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySiteBtnActionPerformed(evt);
            }
        });

        dateTextField.setText(new SimpleDateFormat("dd/M/yyyy").format(new Date()));

        filterByDateBtn.setText("Date Filtered");
        filterByDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByDateBtnActionPerformed(evt);
            }
        });

        filterBySupplierBtn.setText("Filter by Supplier");
        filterBySupplierBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySupplierBtnActionPerformed(evt);
            }
        });

        ascendBtn.setText("Ascend");
        ascendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtnActionPerformed(evt);
            }
        });

        activeOrdersOnlyBtn.setText("Active Orders Only");
        activeOrdersOnlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeOrdersOnlyBtnActionPerformed(evt);
            }
        });

        matchingExistingOrders.setModel(ordersModel);
        matchingExistingOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                matchingExistingOrdersMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(matchingExistingOrders);

        returnToMainMenuBtn.setText("Return to Main Menu");
        returnToMainMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToMainMenuBtnActionPerformed(evt);
            }
        });

        descendBtn.setText("Descend");
        descendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deliveriesPanelLayout = new javax.swing.GroupLayout(deliveriesPanel);
        deliveriesPanel.setLayout(deliveriesPanelLayout);
        deliveriesPanelLayout.setHorizontalGroup(
            deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deliveriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(returnToMainMenuBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deliveriesPanelTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(deliveriesPanelLayout.createSequentialGroup()
                        .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(deliveriesPanelLayout.createSequentialGroup()
                                .addComponent(ascendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(descendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                            .addComponent(dateTextField)
                            .addComponent(locationTextField)
                            .addComponent(supplierTextField))
                        .addGap(37, 37, 37)
                        .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filterBySiteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filterByDateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filterBySupplierBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(activeOrdersOnlyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))))
                .addContainerGap())
        );
        deliveriesPanelLayout.setVerticalGroup(
            deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deliveriesPanelLayout.createSequentialGroup()
                .addComponent(deliveriesPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(filterBySiteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterByDateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterBySupplierBtn))
                .addGap(27, 27, 27)
                .addGroup(deliveriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ascendBtn)
                    .addComponent(activeOrdersOnlyBtn)
                    .addComponent(descendBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnToMainMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        deliveryPanel.setMaximumSize(new java.awt.Dimension(400, 540));
        deliveryPanel.setMinimumSize(new java.awt.Dimension(400, 540));
        deliveryPanel.setName(""); // NOI18N
        deliveryPanel.setPreferredSize(new java.awt.Dimension(400, 540));

        deliveryPanelTitle.setText("Audit - Order Id: 00127653");

        currentUserLabel.setText("Current User:");

        currentDateLabel.setText("Current Date:");

        jLabel4.setText("Tap items to confirm them");

        currentDateText.setText("12/3/2015");

        currentUserText.setText("Kumar Kalla");

        jLabel6.setText("Order Lines");

        ascendBtn1.setText("Ascend");
        ascendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtn1ActionPerformed(evt);
            }
        });

        descendBtn1.setText("Descend");
        descendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtn1ActionPerformed(evt);
            }
        });

        orderNotesLabel.setText("Order Notes:");

        orderDateLabel.setText("Order Date:");

        ETADeliveryLabel.setText("ETA of Delivery:");

        deliveryItemList.setModel(orderModel);
        deliveryItemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deliveryItemListMouseReleased(evt);
            }
        });
        deliveryItemList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                deliveryItemListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(deliveryItemList);

        deliveryStatusLabel.setText("Delivery Status:");

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        dateVerifiedLabel.setText("Date verified:");

        returnToDeliveriesBtn.setText("Return to Deliveries list");
        returnToDeliveriesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToDeliveriesBtnActionPerformed(evt);
            }
        });

        orderNotesValue.setText("jLabel1");

        orderDateValue.setText("jLabel1");

        ETADeliveryValue.setText("jLabel1");

        deliveryStatusField.setText("Type here");

        finishBtn.setText("Finish and return");
        finishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deliveryPanelLayout = new javax.swing.GroupLayout(deliveryPanel);
        deliveryPanel.setLayout(deliveryPanelLayout);
        deliveryPanelLayout.setHorizontalGroup(
            deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(deliveryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deliveryPanelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addComponent(currentDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentDateText))
                            .addComponent(jLabel4)
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addComponent(currentUserLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentUserText)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deliveryPanelLayout.createSequentialGroup()
                                .addComponent(ascendBtn1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(descendBtn1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deliveryPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))))
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(confirmBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deliveryStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(dateVerifiedLabel)
                                .addGap(18, 18, 18)
                                .addComponent(dateVerifiedValue)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deliveryPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addComponent(deliveryStatusField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addComponent(orderNotesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderNotesValue))
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addComponent(orderDateLabel)
                                .addGap(18, 18, 18)
                                .addComponent(orderDateValue))
                            .addGroup(deliveryPanelLayout.createSequentialGroup()
                                .addComponent(ETADeliveryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ETADeliveryValue))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addComponent(returnToDeliveriesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finishBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        deliveryPanelLayout.setVerticalGroup(
            deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deliveryPanelLayout.createSequentialGroup()
                .addComponent(deliveryPanelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentUserLabel)
                            .addComponent(currentUserText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentDateLabel)
                            .addComponent(currentDateText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(deliveryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ascendBtn1)
                            .addComponent(descendBtn1))))
                .addGap(18, 18, 18)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderNotesLabel)
                    .addComponent(orderNotesValue))
                .addGap(43, 43, 43)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderDateLabel)
                    .addComponent(orderDateValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ETADeliveryLabel)
                    .addComponent(ETADeliveryValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveryStatusField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(deliveryStatusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(dateVerifiedLabel)
                    .addComponent(dateVerifiedValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(deliveryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(finishBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(returnToDeliveriesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deliveriesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(deliveryPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deliveriesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(deliveryPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jLayeredPane1.setLayer(deliveriesPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(deliveryPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clear any temporary data and reset this user interface to its
     * default state. then invoke the main interface.
     * @param evt 
     */
    private void returnToMainMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToMainMenuBtnActionPerformed
        MainInterface ui = MainInterface.getInstance();
        ui.setPosition(this.getX(), this.getY());

        this.setVisible(false);
        ui.Run();
    }//GEN-LAST:event_returnToMainMenuBtnActionPerformed

    /**
     * Attempt to filter the current list of orders based on the provided
     * site search term.
     * @param evt 
     */
    private void filterBySiteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySiteBtnActionPerformed
        
        String searchTerm = locationTextField.getText();
        
        if(searchTerm.isEmpty()) {
            System.out.println("Empty search term");
            return;
        }
        
        if(siteFiltered) {
            refreshOrdersModel();
            siteFiltered = false;
        } else {
            // set flags
            siteFiltered = true;
            dateFiltered = false;
            supplierFiltered = false;
            // turn off data & supplier
            filterByDateBtn.setSelected(false);
            filterBySupplierBtn.setSelected(false);

            String param = searchTerm;
            requestFilter("site", param);
        }
    }//GEN-LAST:event_filterBySiteBtnActionPerformed

    /**
     * Attempt to filter the current list of orders based on the provided
     * date search term.
     * @param evt 
     */
    private void filterByDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByDateBtnActionPerformed
        
        String searchTerm = dateTextField.getText();
        
        if(searchTerm.isEmpty()) {
            System.out.println("Empty search term");
            return;
        }
        
        if(dateFiltered) {
            refreshOrdersModel();
            dateFiltered = false;
        } else {
            // set flags
            dateFiltered = true;
            siteFiltered = false;
            supplierFiltered = false;
            // turn off site & supplier
            filterBySiteBtn.setSelected(false);
            filterBySupplierBtn.setSelected(false);

            String txt = searchTerm;
            SimpleDateFormat sdf = new SimpleDateFormat("d/M/yyyy");
            Date date = null;
            try {
                date = sdf.parse(txt);
            } catch (ParseException ex) {
                Logger.getLogger(ViewOrdersUI.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            requestFilter("date", date);
        }
    }//GEN-LAST:event_filterByDateBtnActionPerformed

    /**
     * Attempt to filter the current list of orders based on the provided
     * supplier search term.
     * @param evt 
     */
    private void filterBySupplierBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySupplierBtnActionPerformed
        
        String searchTerm = supplierTextField.getText();
        
        if(searchTerm.isEmpty()) {
            System.out.println("Empty search term");
            return;
        }
        
        if(supplierFiltered) {
            refreshOrdersModel();
            supplierFiltered = false;
        } else {
            // set flags
            supplierFiltered = true;
            dateFiltered = false;
            siteFiltered = false;
            // turn off site && date
            filterBySiteBtn.setSelected(false);
            filterByDateBtn.setSelected(false);

            String param = searchTerm;
            requestFilter("supplier", param);
        }
    }//GEN-LAST:event_filterBySupplierBtnActionPerformed

    /**
     * Called when the ascend button is pressed. Should sort
     * the orders into ascending order
     * @param evt 
     */
    private void ascendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtnActionPerformed
        if(!ascending) {
            reverseList(ordersModel);
            descendBtn.setSelected(false);
            ascendBtn.setSelected(true);
            ascending = true;
        }
    }//GEN-LAST:event_ascendBtnActionPerformed

    private void activeOrdersOnlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeOrdersOnlyBtnActionPerformed

    }//GEN-LAST:event_activeOrdersOnlyBtnActionPerformed

    /**
     * Called when the descending button is pressed. Should sort the orders
     * into descending order.
     * @param evt 
     */
    private void descendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtnActionPerformed
        if(ascending) {
            reverseList(ordersModel);
            descendBtn.setSelected(true);
            ascendBtn.setSelected(false);
            ascending = false;
        }
    }//GEN-LAST:event_descendBtnActionPerformed

    /**
     * Called when the ascending button is pressed on the delivery panel
     * (2nd view) and should sort the orders into ascending order.
     * @param evt 
     */
    private void ascendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtn1ActionPerformed
        if(ascending1) {
            reverseList(orderModel);
            descendBtn1.setSelected(false);
            ascendBtn1.setSelected(true);
            ascending1 = false;
        }
    }//GEN-LAST:event_ascendBtn1ActionPerformed

    /**
     * Called when the descending button is pressed on the delivery panel
     * (2nd view) and should sort the orders into ascending order.
     * @param evt 
     */
    private void descendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtn1ActionPerformed
       if(!ascending1) {
           reverseList(orderModel);
           descendBtn1.setSelected(true);
           ascendBtn1.setSelected(false);
           ascending1 = true;
       }
    }//GEN-LAST:event_descendBtn1ActionPerformed

    /**
     * Called when the confirm button has been pressed. This should confirm that
     * a delivery has been dealt with.
     * @param evt 
     */
    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        dateVerifiedValue.setText(new SimpleDateFormat("dd/MM/YYYY").format(new Date()));
        checkDeliveryContents();
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void deliveryItemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_deliveryItemListValueChanged
       
    }//GEN-LAST:event_deliveryItemListValueChanged

    /**
     * Called when a delivery item has been selected from the list
     * @param evt 
     */
    private void deliveryItemListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliveryItemListMouseReleased
        int si = deliveryItemList.getSelectedIndex();
        updateCheckBoxes(si);
        checkDeliveryContents();
    }//GEN-LAST:event_deliveryItemListMouseReleased

    /**
     * Called when the return to deliveries button has been called. Should handle the
     * transition between the 2nd view back to the first view. Including removing
     * any temporary data and reseting the state of the view.
     * @param evt 
     */
    private void returnToDeliveriesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToDeliveriesBtnActionPerformed
        matchingExistingOrders.clearSelection();
        this.Run();
    }//GEN-LAST:event_returnToDeliveriesBtnActionPerformed

    /**
     * Called when an order is selected. Should select the order and handle transitioning 
     * to the 2nd view.
     * @param evt 
     */
    private void matchingExistingOrdersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matchingExistingOrdersMouseReleased
        selectOrder();
        initCheckBoxes();
    }//GEN-LAST:event_matchingExistingOrdersMouseReleased

    /**
     * Called when the finish button has been pressed. Should finialize the delivery
     * check and set any required data needed to complete a delivery.
     * @param evt 
     */
    private void finishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishBtnActionPerformed
        requestSignature();
        SetOfDeliveries sod = SetOfDeliveries.getInstance();
        sod.addDelivery(delivery);
        ObjectMapper.Serialize(sod.getListOdDeliveries(), "deliveries.ser");
        this.setVisible(false);
        MainInterface ui = MainInterface.getInstance();
        ui.setPosition(this.getX(), this.getY());
        ui.Run();
    }//GEN-LAST:event_finishBtnActionPerformed

    private void locationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTextFieldActionPerformed

    /**
     * Initialise check boxes with default data
     */
    private void initCheckBoxes() {
        for(int i = 0; i < orderModel.size(); i++) {
            JCheckBox box = new JCheckBox();
            box.setEnabled(false);
            box.setSelected(true);
            box.setBounds(345, 215 + (i * 21), 40, 40);
            box.setVisible(false);
            // add to array and panel
            deliveryPanel.add(box);
            checkBoxes.put(i, box); 
        }
    }
    
    /**
     * Update the check boxes based on the selected
     * data.
     * @param selectedIndex 
     */
    private void updateCheckBoxes(int selectedIndex) {

        if(checkBoxes.get(selectedIndex).isVisible()) {
            // already checked so uncheck
            System.out.println("Hiding");
            checkBoxes.get(selectedIndex).setVisible(false);
        } else {
            // not checked so make it
            System.out.println("Showing");
            checkBoxes.get(selectedIndex).setVisible(true);
        }      
        deliveryPanel.revalidate();
        deliveryPanel.repaint();
    }
    
    /**
     * Main execution method for UserInterface
     */
    public void Run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeliveryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeliveryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeliveryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeliveryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // closure
        DeliveryUI that = this;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                // setup default user interface state
                that.refreshOrdersModel();
                that.setVisible(true);
                that.deliveriesPanel.setVisible(true);
                that.deliveryPanel.setVisible(false);
                ascendBtn1ActionPerformed(null);
            }
        });
    }
    
    /**
     * Reverse the order of a model
     * @param model 
     */
    private void reverseList(DefaultListModel model) {
        ArrayList<Object> reversedList = new ArrayList<>();
        for(int i = model.size() - 1; i >= 0; i--) {
            reversedList.add(model.get(i));
        }
        model.clear();
        reversedList.stream().forEach((item) -> {
            model.addElement(item);
        });
    }
    
    /**
     * Filter order list. This will take a filter and invoke
     * a specific filter if it matches any of the provided
     * filter methods.
     * @param filter
     * @param param
     */
    public void requestFilter(String filter, Object param) {

        ArrayList<Order> matching = null;
        if(filter.equalsIgnoreCase("site")) {
            matching = orders.filterBySite((String)param);
        } else if(filter.equalsIgnoreCase("date")) {
            matching = orders.filterByDate((Date)param);
        } else if(filter.equalsIgnoreCase("supplier")) {
            matching = orders.filterBySupplier((String)param);
        }
        
        ordersModel.clear();
        for(Order order : matching) {
            ordersModel.addElement(order);
        }
    }
    
    /**
    * Open Delivery
    */
    public void openDelivery() {
        //TODO
    }
    
    /**
     * Checks the contents of the Delivery
     */
    public void checkDeliveryContents() {
        final String status = deliveryStatusField.getText();
        delivery.updateDeliveryStatus(status);
    }
    
    /**
     * Requests authentication 
     */
    public void requestSignature() {
        delivery.approveDelivery();
    }
    
    /**
     * Gets the selected order based on the users selection and
     * updates the relevant Swing components and models.
     */
    public void selectOrder() {
        Order order = (Order)matchingExistingOrders.getSelectedValue(); //getOrder()
        
        if(order == null) {
            System.out.println("No order selected");
            return;
        }
        
        delivery.setOrder(order);
        
        this.deliveriesPanel.setVisible(false);
        this.deliveryPanel.setVisible(true);
        
        orderModel.clear();
        for(OrderLine orderLine : order.getOrderLines()) {
            orderModel.addElement(orderLine.getItem());
        }
        this.orderDateValue.setText(new SimpleDateFormat("dd/MM/yyyy").format(order.getOrderDate()));
        this.ETADeliveryValue.setText("UNKNOWN");
        this.orderNotesValue.setText(order.getSpecialInstructions());
    }
    
    /**
     * Request an Order
     */
    public void requestOrder() {
        //TODO
    }
    
    @Override
    public void setPosition(int x, int y) {
        this.setLocation(x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ETADeliveryLabel;
    private javax.swing.JLabel ETADeliveryValue;
    private javax.swing.JToggleButton activeOrdersOnlyBtn;
    private javax.swing.JToggleButton ascendBtn;
    private javax.swing.JToggleButton ascendBtn1;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JLabel currentDateLabel;
    private javax.swing.JLabel currentDateText;
    private javax.swing.JLabel currentUserLabel;
    private javax.swing.JLabel currentUserText;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JLabel dateVerifiedLabel;
    private javax.swing.JLabel dateVerifiedValue;
    private javax.swing.JPanel deliveriesPanel;
    private javax.swing.JLabel deliveriesPanelTitle;
    private javax.swing.JList deliveryItemList;
    private javax.swing.JPanel deliveryPanel;
    private javax.swing.JLabel deliveryPanelTitle;
    private javax.swing.JTextField deliveryStatusField;
    private javax.swing.JLabel deliveryStatusLabel;
    private javax.swing.JToggleButton descendBtn;
    private javax.swing.JToggleButton descendBtn1;
    private javax.swing.JToggleButton filterByDateBtn;
    private javax.swing.JToggleButton filterBySiteBtn;
    private javax.swing.JToggleButton filterBySupplierBtn;
    private javax.swing.JButton finishBtn;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JList matchingExistingOrders;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JLabel orderDateValue;
    private javax.swing.JLabel orderNotesLabel;
    private javax.swing.JLabel orderNotesValue;
    private javax.swing.JButton returnToDeliveriesBtn;
    private javax.swing.JButton returnToMainMenuBtn;
    private javax.swing.JTextField supplierTextField;
    // End of variables declaration//GEN-END:variables
}
