package com.ps.interfaces;

import com.ps.model.Catalog;
import com.ps.model.Item;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;

/**
 * User interface for displaying the catalog
 * contents and facilitating the selection,
 * filtering and sorting of items. This UI
 * consists of 2 separate JPanel which provides
 * two views which will switch when the user
 * proceeds from item selection to quantity
 * review. This UI can also be viewed in multiple
 * modes (browse, order). Depending on the mode
 * different components will be visible.
 * @author JCollinge
 */
public class CatalogUI extends UserInterface {

    private Catalog catalog;
    private static CatalogUI singleton;
    
    private ArrayList<Item> selectedItems;
    private ArrayList<JCheckBox> checkBoxes;
    private DefaultListModel<Item> allItems;
    private DefaultListModel<Integer> itemQuantities;
    private ArrayList<Item> itemCache;
    private ArrayList<Integer> quantitiesCache;
    
    private boolean ascending = true;
    private boolean ascending1 = true;
    
    private final int MAX_QTY = 1000;
    
    /**
     * Ctor - initialise any data and/or Swing components
     */
    private CatalogUI() {

        // initialise data
        selectedItems = new ArrayList<>();
        checkBoxes = new ArrayList<>();

        // initialise models
        itemQuantities = new DefaultListModel<Integer>();
        allItems = new DefaultListModel<Item>();
        
        itemCache = new ArrayList<Item>();
        quantitiesCache = new ArrayList<Integer>();
    
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        initComponents();
        
        // Interface Settings       
        this.setSize(400, 540); // change JFRAME size
        jLayeredPane1.setPreferredSize(new Dimension(400, 540)); // change layered pane size

        listOfItems.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    /**
     * Lazy loading singleton
     * @return CatalogUI singleton instance
     */
    public static CatalogUI getInstance() {
        if (singleton == null) {
            singleton = new CatalogUI();
        }
        return singleton;
    }
    
    /**
     * Set the mode of the UI. This is used to
     * restrict which Swing components are visible
     * @param mode Mode to set
     */
    public void setMode(String mode) {
        if(mode.equalsIgnoreCase("browse")) {
            this.proceedToQuantityReviewBtn.setVisible(false);
        } else if(mode.equalsIgnoreCase("order")) {
            this.proceedToQuantityReviewBtn.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        defaultPanel = new javax.swing.JPanel();
        alphabeticalSortBtn = new javax.swing.JToggleButton();
        categorySortBtn = new javax.swing.JToggleButton();
        priceSortBtn = new javax.swing.JToggleButton();
        catalogPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfItems = new javax.swing.JList();
        proceedToQuantityReviewBtn = new javax.swing.JButton();
        ascendBtn = new javax.swing.JToggleButton();
        descendBtn = new javax.swing.JToggleButton();
        catalogPanelTitleSeperator = new javax.swing.JSeparator();
        catalogPanelTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        quantityPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOfSelectedItemNames = new javax.swing.JList();
        cancelOrderBtn = new javax.swing.JButton();
        proceedToOrderReviewBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listOfSelectedItemQuantities = new javax.swing.JList();
        ascendBtn1 = new javax.swing.JToggleButton();
        searchField = new javax.swing.JTextField();
        catalogTitle = new javax.swing.JLabel();
        catalogTitleSeparator = new javax.swing.JSeparator();
        quantityPanelTitleSeparator = new javax.swing.JSeparator();
        quantityPanelTitle = new javax.swing.JLabel();
        descendBtn1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(400, 540));
        setMinimumSize(new java.awt.Dimension(400, 540));
        setResizable(false);

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(400, 540));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(400, 540));

        defaultPanel.setOpaque(false);

        alphabeticalSortBtn.setBackground(new java.awt.Color(51, 51, 51));
        alphabeticalSortBtn.setForeground(new java.awt.Color(255, 255, 255));
        alphabeticalSortBtn.setText("Alphabetically Ordered");
        alphabeticalSortBtn.setBorder(null);
        alphabeticalSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphabeticalSortBtnActionPerformed(evt);
            }
        });

        categorySortBtn.setBackground(new java.awt.Color(51, 51, 51));
        categorySortBtn.setForeground(new java.awt.Color(255, 255, 255));
        categorySortBtn.setText("Order Categorically");
        categorySortBtn.setBorder(null);
        categorySortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySortBtnActionPerformed(evt);
            }
        });

        priceSortBtn.setBackground(new java.awt.Color(51, 51, 51));
        priceSortBtn.setForeground(new java.awt.Color(255, 255, 255));
        priceSortBtn.setText("Order by Unit Price");
        priceSortBtn.setBorder(null);
        priceSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout defaultPanelLayout = new javax.swing.GroupLayout(defaultPanel);
        defaultPanel.setLayout(defaultPanelLayout);
        defaultPanelLayout.setHorizontalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(priceSortBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categorySortBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alphabeticalSortBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        defaultPanelLayout.setVerticalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defaultPanelLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(alphabeticalSortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categorySortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceSortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        catalogPanel.setVisible(true);
        catalogPanel.setBackground(new java.awt.Color(0, 0, 0));
        catalogPanel.setForeground(new java.awt.Color(255, 255, 255));
        catalogPanel.setPreferredSize(new java.awt.Dimension(400, 540));

        listOfItems.setBackground(new java.awt.Color(0, 0, 0));
        listOfItems.setForeground(new java.awt.Color(255, 255, 255));
        listOfItems.setModel(allItems);
        jScrollPane1.setViewportView(listOfItems);

        proceedToQuantityReviewBtn.setBackground(new java.awt.Color(51, 51, 51));
        proceedToQuantityReviewBtn.setForeground(new java.awt.Color(255, 255, 255));
        proceedToQuantityReviewBtn.setText("Proceed to Quantity Review");
        proceedToQuantityReviewBtn.setBorder(null);
        proceedToQuantityReviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToQuantityReviewBtnActionPerformed(evt);
            }
        });

        ascendBtn.setBackground(new java.awt.Color(51, 51, 51));
        ascendBtn.setForeground(new java.awt.Color(255, 255, 255));
        ascendBtn.setText("Ascend");
        ascendBtn.setBorder(null);
        ascendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtnActionPerformed(evt);
            }
        });

        descendBtn.setBackground(new java.awt.Color(51, 51, 51));
        descendBtn.setForeground(new java.awt.Color(255, 255, 255));
        descendBtn.setText("Descend");
        descendBtn.setBorder(null);
        descendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtnActionPerformed(evt);
            }
        });

        catalogPanelTitleSeperator.setBackground(new java.awt.Color(0, 0, 0));
        catalogPanelTitleSeperator.setForeground(new java.awt.Color(0, 204, 255));

        catalogPanelTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        catalogPanelTitle.setForeground(new java.awt.Color(255, 255, 255));
        catalogPanelTitle.setText("Creating new order. Select items.");

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Available Catalog");

        javax.swing.GroupLayout catalogPanelLayout = new javax.swing.GroupLayout(catalogPanel);
        catalogPanel.setLayout(catalogPanelLayout);
        catalogPanelLayout.setHorizontalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanelTitleSeperator)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(catalogPanelTitle))
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(catalogPanelLayout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel1)))
                            .addComponent(ascendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, catalogPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(descendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(proceedToQuantityReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        catalogPanelLayout.setVerticalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(catalogPanelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(catalogPanelTitleSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(ascendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proceedToQuantityReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        quantityPanel.setVisible(false);
        quantityPanel.setBackground(new java.awt.Color(0, 0, 0));
        quantityPanel.setPreferredSize(new java.awt.Dimension(400, 540));

        listOfSelectedItemNames.setBackground(new java.awt.Color(0, 0, 0));
        listOfSelectedItemNames.setForeground(new java.awt.Color(255, 255, 255));
        listOfSelectedItemNames.setModel(allItems);
        jScrollPane2.setViewportView(listOfSelectedItemNames);

        cancelOrderBtn.setBackground(new java.awt.Color(51, 51, 51));
        cancelOrderBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelOrderBtn.setText("Cancel Order");
        cancelOrderBtn.setBorder(null);
        cancelOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderBtnActionPerformed(evt);
            }
        });

        proceedToOrderReviewBtn.setBackground(new java.awt.Color(51, 51, 51));
        proceedToOrderReviewBtn.setForeground(new java.awt.Color(255, 255, 255));
        proceedToOrderReviewBtn.setText("Proceed to Order Review");
        proceedToOrderReviewBtn.setBorder(null);
        proceedToOrderReviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToOrderReviewBtnActionPerformed(evt);
            }
        });

        listOfSelectedItemQuantities.setBackground(new java.awt.Color(0, 0, 0));
        listOfSelectedItemQuantities.setForeground(new java.awt.Color(255, 255, 255));
        listOfSelectedItemQuantities.setModel(itemQuantities);
        listOfSelectedItemQuantities.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listOfSelectedItemQuantitiesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listOfSelectedItemQuantities);

        ascendBtn1.setBackground(new java.awt.Color(51, 51, 51));
        ascendBtn1.setForeground(new java.awt.Color(255, 255, 255));
        ascendBtn1.setText("Ascend");
        ascendBtn1.setBorder(null);
        ascendBtn1.setMaximumSize(new java.awt.Dimension(80, 25));
        ascendBtn1.setMinimumSize(new java.awt.Dimension(80, 25));
        ascendBtn1.setPreferredSize(new java.awt.Dimension(80, 25));
        ascendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtn1ActionPerformed(evt);
            }
        });

        searchField.setText("Search here");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        catalogTitle.setForeground(new java.awt.Color(255, 255, 255));
        catalogTitle.setText("Available Catalog");

        quantityPanelTitleSeparator.setBackground(new java.awt.Color(0, 0, 0));
        quantityPanelTitleSeparator.setForeground(new java.awt.Color(0, 204, 255));

        quantityPanelTitle.setForeground(new java.awt.Color(255, 255, 255));
        quantityPanelTitle.setText("Creating new order - Select items");

        descendBtn1.setBackground(new java.awt.Color(51, 51, 51));
        descendBtn1.setForeground(new java.awt.Color(255, 255, 255));
        descendBtn1.setText("Descend");
        descendBtn1.setBorder(null);
        descendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout quantityPanelLayout = new javax.swing.GroupLayout(quantityPanel);
        quantityPanel.setLayout(quantityPanelLayout);
        quantityPanelLayout.setHorizontalGroup(
            quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(quantityPanelTitleSeparator)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quantityPanelLayout.createSequentialGroup()
                        .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(catalogTitle))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                                    .addComponent(ascendBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(descendBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                                .addComponent(searchField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(quantityPanelTitle, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(catalogTitleSeparator, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, quantityPanelLayout.createSequentialGroup()
                        .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(quantityPanelLayout.createSequentialGroup()
                                .addComponent(cancelOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(proceedToOrderReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(quantityPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))))
        );
        quantityPanelLayout.setVerticalGroup(
            quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quantityPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(quantityPanelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantityPanelTitleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(catalogTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catalogTitleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ascendBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descendBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proceedToOrderReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(quantityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(187, Short.MAX_VALUE)
                    .addComponent(defaultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(24, 24, 24)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(quantityPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(defaultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 367, Short.MAX_VALUE)))
        );
        jLayeredPane1.setLayer(defaultPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(catalogPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(quantityPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 'Proceed to quantity review' button press. Responsible for handling the
     * transition from the catalog display panel to the quantity review panel.
     * @param evt 
     */
    private void proceedToQuantityReviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToQuantityReviewBtnActionPerformed
   
        // grab the currently selected items
        setSelectedItem();
        
        // if there are no selected items stop the user proceeding
        if(selectedItems.isEmpty()) {
            System.out.println("Cannot proceed without selection");
            return;
        }
        
        // set the default values to the quantity model
        initialiseQuantities();
        // for each of the selected value add a check box
        updateCheckBoxes();

        // switch panels
        catalogPanel.setVisible(false);
        quantityPanel.setVisible(true);
        ascending1 = true;
        ascendBtn1.setSelected(true);
        
    }//GEN-LAST:event_proceedToQuantityReviewBtnActionPerformed

    /**
    * Add default values to the quantities model for selected items
    **/
    private void initialiseQuantities() {
        
        // clear the current quanities model
        itemQuantities.clear();
        
        // for each item
        for (int i = 0; i < allItems.size(); i++) {
            Item item = (Item) allItems.get(i);
            
            // if the item is selected
            if (selectedItems.contains(item)) {
               itemQuantities.addElement(1);
            } else {
               itemQuantities.addElement(0);
            }
        }
        
        Object[] tmp = itemQuantities.toArray();
        quantitiesCache.clear();
        for(int i = 0; i < tmp.length; i++) {
            quantitiesCache.add((Integer) tmp[i]);
        }
    }
    
    /**
     * Check the currently selected items and draw the checkboxes
     */
    private void updateCheckBoxes() {
        
        // remove all checkboxes from panel and clear model
        for(JCheckBox box : checkBoxes) {
            quantityPanel.remove(box);
        }
        checkBoxes.clear();
        
    /* for each item check if it is selected and create
           a checkbox and incremenet the quantity if it is */
        for (int i = 0; i < allItems.size(); i++) {

            // get the item from the items list
            Item item = (Item) allItems.get(i);
            
            // check if it is selected
            if (selectedItems.contains(item)) {
                JCheckBox checkBox = new JCheckBox();
                checkBoxes.add(checkBox);
                checkBox.setSelected(true);
                checkBox.setVisible(true);
                checkBox.setEnabled(false);
                quantityPanel.add(checkBox);
                checkBox.setBounds(295, 190 + (i * 22), 40, 40);
            }
        }
        updateScreen();
    }
    
    /**
     * User has pressed the ascend button on the catalog panel.
     * This will list the items in ascending order
     */
    private void ascendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtnActionPerformed
        // reverse the list and toggle the buttons
        if(!ascending) {
            reverseList();
            descendBtn.setSelected(false);
            ascendBtn.setSelected(true);
            ascending = true;
            updateScreen();
        }
    }//GEN-LAST:event_ascendBtnActionPerformed

    /**
     * User has pressed the descend button on the catalog panel.
     * This will list the items in descending order
     */
    private void descendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtnActionPerformed
        // reverse the list and toggle the buttons
        if(ascending) {
            reverseList();
            ascendBtn.setSelected(false);
            descendBtn.setSelected(true);
            ascending = false;
            updateScreen();
        }
    }//GEN-LAST:event_descendBtnActionPerformed

    /**
     * User has pressed the sort alphabetically button
     */
    private void alphabeticalSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphabeticalSortBtnActionPerformed
        // create a tmp array which matches the items array size
        Item[] items = new Item[allItems.size()];
        Integer[] quantities = new Integer[allItems.size()];
        // for each item add it to the tmp array
        for(int i = 0; i < allItems.size(); i++) {
            items[i] = allItems.get(i);
            quantities[i] = itemQuantities.get(i);
        }        
        // sort the array list * uses the CompareTo method
        for(int i = 0; i < allItems.size(); i++) {
            for(int j = 1; j < allItems.size(); j++) {
                // swap until it is in the right position
                if(items[j-1].getName().compareTo(items[j].getName()) > 0) {
                    /* if the left item's name is lexicographically greater (closer to Z)
                       than the right, swap the items in the array. */
                    Item cpy = items[j-1];
                    items[j-1] = items[j];
                    items[j] = cpy;
                    // swap the quantities
                    Integer icpy = quantities[j-1];
                    quantities[j-1] = quantities[j];
                    quantities[j] = icpy;
                }
            }
        }
        ArrayList<Item> sortedItems = new ArrayList<Item>();
        ArrayList<Integer> sortedQuantities = new ArrayList<Integer>();
        for(int i = 0; i < items.length; i++) {
            sortedItems.add(items[i]);
            sortedQuantities.add(quantities[i]);
        }
        updateModel(allItems, sortedItems);
        updateModel(itemQuantities, sortedQuantities);
        updateCheckBoxes();
        
        // toggle the other sort buttons and put in ascending order
        categorySortBtn.setSelected(false);
        priceSortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
        ascendBtn1ActionPerformed(null);
    }//GEN-LAST:event_alphabeticalSortBtnActionPerformed

    /**
     * User has pressed the sort by category button
     */
    private void categorySortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySortBtnActionPerformed
        // create a tmp array which matches the items array size
        Item[] items = new Item[allItems.size()];
        Integer[] quantities = new Integer[allItems.size()];
        // for each item add it to the tmp array
        for(int i = 0; i < allItems.size(); i++) {
            items[i] = allItems.get(i);
            quantities[i] = itemQuantities.get(i);
        }        
        // sort the array list * uses the CompareTo method
        for(int i = 0; i < allItems.size(); i++) {
            for(int j = 1; j < allItems.size(); j++) {
                // swap until it is in the right position
                if(items[j-1].getType().compareTo(items[j].getType()) > 0) {
                    /* if the left item's type is lexicographically greater (closer to Z)
                       than the right, swap the items in the array. */
                    Item cpy = items[j-1];
                    items[j-1] = items[j];
                    items[j] = cpy;
                    // swap the quantities
                    Integer icpy = quantities[j-1];
                    quantities[j-1] = quantities[j];
                    quantities[j] = icpy;
                }
            }
        }
        ArrayList<Item> sortedItems = new ArrayList<Item>();
        ArrayList<Integer> sortedQuantities = new ArrayList<Integer>();
        for(int i = 0; i < items.length; i++) {
            sortedItems.add(items[i]);
            sortedQuantities.add(quantities[i]);
        }
        updateModel(allItems, sortedItems);
        updateModel(itemQuantities, sortedQuantities);
        updateCheckBoxes();
        
        // toggle the other sort buttons and set to an accending order
        alphabeticalSortBtn.setSelected(false);
        priceSortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
        ascendBtn1ActionPerformed(null);
    }//GEN-LAST:event_categorySortBtnActionPerformed

    /**
     * User has pressed the sort by price button
     */
    private void priceSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSortBtnActionPerformed
        // create a tmp array which matches the items array size
        Item[] items = new Item[allItems.size()];
        Integer[] quantities = new Integer[allItems.size()];
        // for each item add it to the tmp array
        for(int i = 0; i < allItems.size(); i++) {
            items[i] = allItems.get(i);
            quantities[i] = itemQuantities.get(i);
        }        
        // sort the array list * uses the CompareTo method
        for(int i = 0; i < allItems.size(); i++) {
            for(int j = 1; j < allItems.size(); j++) {
                // swap until it is in the right position
                if(items[j-1].getPrice() > items[j].getPrice()) {
                    /* if the left item's price is greater than the right item
                    swap them*/
                    Item cpy = items[j-1];
                    items[j-1] = items[j];
                    items[j] = cpy;
                    // swap the quantities
                    Integer icpy = quantities[j-1];
                    quantities[j-1] = quantities[j];
                    quantities[j] = icpy;
                }
            }
        }
        ArrayList<Item> sortedItems = new ArrayList<Item>();
        ArrayList<Integer> sortedQuantities = new ArrayList<Integer>();
        for(int i = 0; i < items.length; i++) {
            sortedItems.add(items[i]);
            sortedQuantities.add(quantities[i]);
        }
        updateModel(allItems, sortedItems);
        updateModel(itemQuantities, sortedQuantities);
        updateCheckBoxes();
        
        // toggle the other sort buttons and set to an accending order
        alphabeticalSortBtn.setSelected(false);
        categorySortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
        ascendBtn1ActionPerformed(null);
    }//GEN-LAST:event_priceSortBtnActionPerformed

    /**
     * Called every time a letter is typed in the search field.
     * Should filter the items in the list dependent on the 
     * search field.
     * @param evt 
     */
    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        String searchFieldText = searchField.getText();
        if (!searchFieldText.isEmpty()) {
            ArrayList<Item> searchedItems = new ArrayList<>();
            ArrayList<Integer> searchedQuantities = new ArrayList<>();
            for(int i = 0; i < allItems.size(); i++) {
                if(allItems.get(i).getName().toLowerCase().contains(searchFieldText.toLowerCase())) {
                    searchedItems.add(allItems.get(i));
                    searchedQuantities.add(itemQuantities.get(i));
                }
            }
            allItems.clear();
            updateModel(allItems, searchedItems);
            updateModel(itemQuantities, searchedQuantities);
            updateCheckBoxes();
//            searchedItems.stream().forEach((item) -> {
//                allItems.addElement(item);
//            });
        } else {
            updateModel(allItems, itemCache);
            updateModel(itemQuantities, quantitiesCache);
            updateCheckBoxes();
            //displayCatalog();
        }
    }//GEN-LAST:event_searchFieldKeyReleased

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    /**
     * User has pressed the ascend button on the quantity panel
     */
    private void ascendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtn1ActionPerformed
        if(!ascending1) {
            reverseList();
            descendBtn1.setSelected(false);
            ascendBtn1.setSelected(true);
            ascending1 = true;
            updateScreen();
        }
    }//GEN-LAST:event_ascendBtn1ActionPerformed

    /**
     * Selected item quantities values have changed
     */
    private void listOfSelectedItemQuantitiesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listOfSelectedItemQuantitiesValueChanged
        int selectedIndex = ((JList) evt.getSource()).getSelectedIndex();
        
        if(selectedIndex >= 0 && selectedIndex < allItems.size()) {
        
            if (selectedItems.contains(allItems.get(selectedIndex))) {
                
                JTextField quantity = new JTextField();
                final JComponent[] inputs = new JComponent[]{
                    new JLabel("Quantity"), quantity
                };
                JOptionPane.showMessageDialog(null, inputs, "Quantity Input", JOptionPane.PLAIN_MESSAGE);

                String txt = quantity.getText();
                int value;
                try {
                    value = Integer.valueOf(txt);
                } catch (NumberFormatException e) {
                    System.out.println("Couldn't convert input to Integer");
                    return;
                }
                
                //validate input
                if(value > 0 && value < MAX_QTY) {
                    if(selectedIndex >= 0 && selectedIndex < itemQuantities.size()) {
                        itemQuantities.set(selectedIndex, value);
                    }
                } else {
                    System.out.println("Illegal quantities value " + value + " was entered.");
                    return;
                }
            }
            Object[] tmp = itemQuantities.toArray();
            quantitiesCache.clear();
            for(int i = 0; i < tmp.length; i++) {
                quantitiesCache.add((Integer) tmp[i]);
            }
        }
    }//GEN-LAST:event_listOfSelectedItemQuantitiesValueChanged

    /**
     * User pressed the proceed to order review button.
     * Switch between the catalog panel and the quantity panel
     */
    private void proceedToOrderReviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToOrderReviewBtnActionPerformed
        
        // stop user proceeding if no items selected
        if(selectedItems.size() < 1) {
            System.out.println("Can't proceed with an empty order!");
            return;
        }
        
        // get the place order ui
        PlaceOrderUI ui = PlaceOrderUI.getInstance();
        
        // add all the selected items to the ui
        for (int i = 0; i < selectedItems.size(); i++) {
            Item item = selectedItems.get(i);
            int index = allItems.indexOf(item);
            ui.addItem(item, (Integer) itemQuantities.get(index));
        }
        
        ui.setPosition(this.getX(), this.getY());
        ui.checkout();
        this.setVisible(false);
    }//GEN-LAST:event_proceedToOrderReviewBtnActionPerformed

    /**
     * Cancel the current order. This should cleanup any temporary data and 
     * reset the user interface to its default state before returning to the
     * Main user interface
     */
    private void cancelOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderBtnActionPerformed
       
        // clear all the data
        selectedItems.clear();
        for(JCheckBox box : checkBoxes) {
            quantityPanel.remove(box);
        }
        checkBoxes.clear();
        
        // clear all the models
        itemQuantities.clear();
        allItems.clear();
        
        // switch the panels back to default
        catalogPanel.setVisible(true);
        quantityPanel.setVisible(false);
        
        // get the place order ui and clear all the data in there
        PlaceOrderUI pui = PlaceOrderUI.getInstance();
        pui.clear();
        
        // hide this ui
        this.setVisible(false);
        
        // switch back to the main interface
        MainInterface ui = MainInterface.getInstance();
        ui.setPosition(this.getX(), this.getY());
        ui.Run();
    }//GEN-LAST:event_cancelOrderBtnActionPerformed

    /**
     * User has pressed the descend button on the quantity review panel
     * @param evt 
     */
    private void descendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtn1ActionPerformed
        // only update if currently not ascending
        if(ascending1) {
            reverseList();
            ascendBtn1.setSelected(false);
            descendBtn1.setSelected(true);
            ascending1 = false;
            updateScreen();
        }
    }//GEN-LAST:event_descendBtn1ActionPerformed

    /**
     * Main execution method for UserInterface
     */
    @Override
    public void Run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        CatalogUI that = CatalogUI.getInstance();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {   
                that.setVisible(true);
                // get latest catalog of items
                catalog = Catalog.getCatalog();
                displayCatalog();          
            }
        });
    }
    
    /**
     * Called to update Swing rendering
     */
    private void updateScreen() {
        jLayeredPane1.revalidate();
        jLayeredPane1.repaint();
    }

    /**
     * WARNING: Required by class diagram but unused.
     * @return Item selected item
     */
    Item getSelectedItem() {
        return null;
    }
    
    /**
     * Display the catalog
     */
    public void displayCatalog() {
        // put all items from the catalog and add them to the items model
        updateModel(allItems, catalog.getListOfItems());
        // set initial quantities model
        initialiseQuantities();
        // alphabetic sort the list
        alphabeticalSortBtnActionPerformed(null);
        alphabeticalSortBtn.setSelected(true);
        // put in ascending order
        ascendBtnActionPerformed(null);
        ascendBtn.setSelected(true);
        // set panels
        catalogPanel.setVisible(true);
        defaultPanel.setVisible(true);
        quantityPanel.setVisible(false);
        
        Object[] tmp = allItems.toArray();
        itemCache.clear();
        for(int i = 0; i < tmp.length; i++) {
            itemCache.add((Item) tmp[i]);
        }
        
    }
    
    /**
     * Update a model
     */
    private void updateModel(DefaultListModel oldList, ArrayList newList) {        
        oldList.clear();
        newList.stream().forEach((item) -> {
            oldList.addElement(item);
        });
    }

    /**
     * Close the catalog
     */
    public void closeCatalog() {
        
        // clear all models
        allItems.clear();
        itemQuantities.clear();
        
        // clear all data
        updateCheckBoxes();
        
        // reset panels
        this.catalogPanel.setVisible(true);
        this.quantityPanel.setVisible(false);
    }

    /**
     * Set selected item
     */
    public void setSelectedItem() {
        // get the selected indicies from the model
        int[] indices = listOfItems.getSelectedIndices();
        // update the selected items
        selectedItems.clear();
        for (int i = 0; i < indices.length; i++) {
            System.out.println("Selected index: " + indices[i]);
            selectedItems.add((Item) allItems.get(indices[i]));
        }
    }

    /**
     * get the current item model
     * @return DefaultListModel
     */
    public DefaultListModel getModel() {
        return allItems;
    }

    /**
     * Reverse the item and quantity lists
     */
    private void reverseList() {
        // create temp list
        ArrayList<Item> reversedItemList = new ArrayList<>();
        ArrayList<Integer> reversedQuantityList = new ArrayList();
        /* use reverse loop to add the elements to the temp
        list in reverse order.*/
        for(int i = allItems.size() - 1; i >= 0; i--) {
            reversedItemList.add(allItems.get(i));
            reversedQuantityList.add(itemQuantities.get(i));
        }
        // clear and update the item list model
        updateModel(allItems, reversedItemList);
        updateModel(itemQuantities, reversedQuantityList);
        // update the corresponding lists
        updateCheckBoxes();
    }
    
    @Override
    public void setPosition(int x, int y) {
        this.setLocation(x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alphabeticalSortBtn;
    private javax.swing.JToggleButton ascendBtn;
    private javax.swing.JToggleButton ascendBtn1;
    private javax.swing.JButton cancelOrderBtn;
    private javax.swing.JPanel catalogPanel;
    private javax.swing.JLabel catalogPanelTitle;
    private javax.swing.JSeparator catalogPanelTitleSeperator;
    private javax.swing.JLabel catalogTitle;
    private javax.swing.JSeparator catalogTitleSeparator;
    private javax.swing.JToggleButton categorySortBtn;
    private javax.swing.JPanel defaultPanel;
    private javax.swing.JToggleButton descendBtn;
    private javax.swing.JToggleButton descendBtn1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listOfItems;
    private javax.swing.JList listOfSelectedItemNames;
    private javax.swing.JList listOfSelectedItemQuantities;
    private javax.swing.JToggleButton priceSortBtn;
    private javax.swing.JButton proceedToOrderReviewBtn;
    private javax.swing.JButton proceedToQuantityReviewBtn;
    private javax.swing.JPanel quantityPanel;
    private javax.swing.JLabel quantityPanelTitle;
    private javax.swing.JSeparator quantityPanelTitleSeparator;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
