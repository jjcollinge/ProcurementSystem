package procurementsystem;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * @author JC
 */
public class ViewOrdersUI extends UserInterface {

    private static ViewOrdersUI singleton;
    private SetOfOrders orders;
    private DefaultListModel ordersModel;
    
    private boolean siteFiltered = false;
    private boolean dateFiltered = false;
    private boolean supplierFiltered = false;
    
    /**
     * Creates new form ViewOrderUI
     */
    private ViewOrdersUI() {
        
        ordersModel =  new DefaultListModel();
        refreshModel();
        initComponents();
        
        //Settings
        this.setSize(400, 540);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public static ViewOrdersUI getInstance() {
        if (singleton == null) {
            singleton = new ViewOrdersUI();
        }
        return singleton;
    }
    
    public void refreshModel() {
        orders = SetOfOrders.getInstance();
        
        ordersModel.clear();
        for(Order order : orders.getAllOrders()) {
            ordersModel.addElement(order);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        ordersPanel = new javax.swing.JPanel();
        locationTextField = new javax.swing.JTextField();
        dateTextField = new javax.swing.JTextField();
        supplierTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        matchingExistingOrders = new javax.swing.JList();
        returnToMainMenuBtn = new javax.swing.JButton();
        filterBySiteBtn = new javax.swing.JToggleButton();
        filterByDateBtn = new javax.swing.JToggleButton();
        filterBySupplierBtn = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        locationTextField.setText("Sheffield S1");

        dateTextField.setText("Something else?");

        supplierTextField.setText("Something else?");

        matchingExistingOrders.setModel(ordersModel);
        jScrollPane1.setViewportView(matchingExistingOrders);

        returnToMainMenuBtn.setText("Return to Main Menu");
        returnToMainMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToMainMenuBtnActionPerformed(evt);
            }
        });

        filterBySiteBtn.setText("Site Filtered");
        filterBySiteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySiteBtnActionPerformed(evt);
            }
        });

        filterByDateBtn.setText("Filter by Date");
        filterByDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByDateBtnActionPerformed(evt);
            }
        });

        filterBySupplierBtn.setText("Filter by Supplier");
        filterBySupplierBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBySupplierBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ordersPanelLayout = new javax.swing.GroupLayout(ordersPanel);
        ordersPanel.setLayout(ordersPanelLayout);
        ordersPanelLayout.setHorizontalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ordersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordersPanelLayout.createSequentialGroup()
                        .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                .addComponent(locationTextField))
                            .addComponent(supplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterBySupplierBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(filterBySiteBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filterByDateBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(returnToMainMenuBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ordersPanelLayout.setVerticalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterBySiteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterByDateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(supplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterBySupplierBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(returnToMainMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane1.setLayer(ordersPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnToMainMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToMainMenuBtnActionPerformed
        
        MainInterface ui = MainInterface.getInstance();
        ui.setPosition(this.getX(), this.getY());
        
        this.setVisible(false);
        ui.Run();
    }//GEN-LAST:event_returnToMainMenuBtnActionPerformed

    private void filterBySiteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySiteBtnActionPerformed
        if(siteFiltered) {
            refreshModel();
            siteFiltered = false;
        } else {
            // set flags
            siteFiltered = true;
            dateFiltered = false;
            supplierFiltered = false;
            // turn off data & supplier
            filterByDateBtn.setSelected(false);
            filterBySupplierBtn.setSelected(false);
            
            String param = locationTextField.getText();
            requestFilter("site", param);
        }
    }//GEN-LAST:event_filterBySiteBtnActionPerformed

    private void filterByDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByDateBtnActionPerformed
        if(dateFiltered) {
            refreshModel();
            dateFiltered = false;
        } else {
             // set flags
            dateFiltered = true;
            siteFiltered = false;
            supplierFiltered = false;
            // turn off site & supplier
            filterBySiteBtn.setSelected(false);
            filterBySupplierBtn.setSelected(false);
            
            String txt = dateTextField.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("d/M/yyyy");
            Date date = null;
             try {
                 date = sdf.parse(txt);
             } catch (ParseException ex) {
                 Logger.getLogger(ViewOrdersUI.class.getName()).log(Level.SEVERE, null, ex);
             }
            requestFilter("date", date);
           
        }
    }//GEN-LAST:event_filterByDateBtnActionPerformed

    private void filterBySupplierBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBySupplierBtnActionPerformed
        if(supplierFiltered) {
            refreshModel();
            supplierFiltered = false;
        } else {
            // set flags
            supplierFiltered = true;
            dateFiltered = false;
            siteFiltered = false;
            // turn off site && date
            filterBySiteBtn.setSelected(false);
            filterByDateBtn.setSelected(false);
            
            String param = supplierTextField.getText();
            requestFilter("supplier", param);
        }
    }//GEN-LAST:event_filterBySupplierBtnActionPerformed

    /**
     * Main execution method for UserInterface
     */
    public void Run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrdersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrdersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrdersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrdersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        ViewOrdersUI that = this;

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                that.refreshModel();
                that.setVisible(true);
            }
        });
    }

     //private SetOfOrders orderList;
    /**
     * Displays all of the current orders
     */
    public void displayCurrentOrders() {
        //TODO
    }

    /**
     * Load all current orders
     */
    public void loadOrders() {
        //TODO
    }

    /**
     * Filter order list
     */
    public void requestFilter(String filter, Object param) {

        ArrayList<Order> matching = null;
        if(filter.equalsIgnoreCase("site")) {
            matching = orders.filterBySite((String)param);
        } else if(filter.equalsIgnoreCase("date")) {
            matching = orders.filterByDate((Date)param);
        } else if(filter.equalsIgnoreCase("supplier")) {
            matching = orders.filterBySupplier((String)param);
        }
        
        ordersModel.clear();
        for(Order order : matching) {
            ordersModel.addElement(order);
        }
    }

    @Override
    public void setPosition(int x, int y) {
        this.setLocation(x, y);
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dateTextField;
    private javax.swing.JToggleButton filterByDateBtn;
    private javax.swing.JToggleButton filterBySiteBtn;
    private javax.swing.JToggleButton filterBySupplierBtn;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JList matchingExistingOrders;
    private javax.swing.JPanel ordersPanel;
    private javax.swing.JButton returnToMainMenuBtn;
    private javax.swing.JTextField supplierTextField;
    // End of variables declaration//GEN-END:variables

}
