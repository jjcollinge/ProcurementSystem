package procurementsystem;

import java.awt.BorderLayout;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

/**
 *
 * @author JC
 */
public class CatalogUI extends UserInterface {

    private Catalog catalog;
    private ArrayList<Item> selectedItems;
    private ArrayList<JCheckBox> checkBoxes;
    private DefaultListModel<Item> allItems;
    //private ArrayList<Integer> selectedItemsQuantities;
    private DefaultListModel<Integer> itemQuantities;
    //private ArrayList<Boolean> selectedItemsIcons;
    private DefaultListModel<Boolean> itemIcons;

    private static CatalogUI singleton;
    private boolean ascending = true;
    private boolean ascending1 = true;

    /**
     * Creates new form CatalogUI
     */
    private CatalogUI() {

        // Member data
        selectedItems = new ArrayList<>();
        allItems = new DefaultListModel();

        //selectedItemsQuantities = new ArrayList<>();
        itemQuantities = new DefaultListModel();

        //selectedItemsIcons = new ArrayList<>();
        itemIcons = new DefaultListModel();
        
        checkBoxes = new ArrayList<>();

        // Interface Settings
        this.setSize(400, 540);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        initComponents();

        listOfItems.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    public static CatalogUI getInstance() {
        if (singleton == null) {
            singleton = new CatalogUI();
        }
        return singleton;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        defaultPanel = new javax.swing.JPanel();
        alphabeticalSortBtn = new javax.swing.JToggleButton();
        categorySortBtn = new javax.swing.JToggleButton();
        priceSortBtn = new javax.swing.JToggleButton();
        quantityPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listOfSelectedItemNames = new javax.swing.JList();
        cancelOrderBtn = new javax.swing.JButton();
        proceedToOrderReviewBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listOfSelectedItemQuantities = new javax.swing.JList();
        ascendBtn1 = new javax.swing.JToggleButton();
        descendBtn1 = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        catalogTitle = new javax.swing.JLabel();
        catalogTitleSeparator = new javax.swing.JSeparator();
        quantityPanelTitleSeparator = new javax.swing.JSeparator();
        quantityPanelTitle = new javax.swing.JLabel();
        catalogPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfItems = new javax.swing.JList();
        proceedToQuantityReviewBtn = new javax.swing.JButton();
        ascendBtn = new javax.swing.JToggleButton();
        descendBtn = new javax.swing.JToggleButton();
        catalogPanelTitleSeperator = new javax.swing.JSeparator();
        catalogPanelTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        defaultPanel.setOpaque(false);

        alphabeticalSortBtn.setText("Alphabetically Ordered");
        alphabeticalSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphabeticalSortBtnActionPerformed(evt);
            }
        });

        categorySortBtn.setText("Order Categorically");
        categorySortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySortBtnActionPerformed(evt);
            }
        });

        priceSortBtn.setText("Order by Unit Price");
        priceSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout defaultPanelLayout = new javax.swing.GroupLayout(defaultPanel);
        defaultPanel.setLayout(defaultPanelLayout);
        defaultPanelLayout.setHorizontalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceSortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphabeticalSortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categorySortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        defaultPanelLayout.setVerticalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, defaultPanelLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(alphabeticalSortBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categorySortBtn)
                .addGap(12, 12, 12)
                .addComponent(priceSortBtn)
                .addContainerGap())
        );

        quantityPanel.setVisible(false);

        listOfSelectedItemNames.setModel(allItems);
        jScrollPane2.setViewportView(listOfSelectedItemNames);

        cancelOrderBtn.setText("Cancel Order");
        cancelOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderBtnActionPerformed(evt);
            }
        });

        proceedToOrderReviewBtn.setText("Proceed to Order Review");
        proceedToOrderReviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToOrderReviewBtnActionPerformed(evt);
            }
        });

        listOfSelectedItemQuantities.setModel(itemQuantities);
        listOfSelectedItemQuantities.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listOfSelectedItemQuantitiesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listOfSelectedItemQuantities);

        ascendBtn1.setText("Ascend");
        ascendBtn1.setMaximumSize(new java.awt.Dimension(80, 25));
        ascendBtn1.setMinimumSize(new java.awt.Dimension(80, 25));
        ascendBtn1.setPreferredSize(new java.awt.Dimension(80, 25));
        ascendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtn1ActionPerformed(evt);
            }
        });

        descendBtn1.setText("Descend");
        descendBtn1.setMaximumSize(new java.awt.Dimension(80, 25));
        descendBtn1.setMinimumSize(new java.awt.Dimension(80, 25));
        descendBtn1.setPreferredSize(new java.awt.Dimension(80, 25));
        descendBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtn1ActionPerformed(evt);
            }
        });

        searchField.setText("Search here");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        catalogTitle.setText("Available Catalog");

        quantityPanelTitle.setText("Creating new order - Select items");

        javax.swing.GroupLayout quantityPanelLayout = new javax.swing.GroupLayout(quantityPanel);
        quantityPanel.setLayout(quantityPanelLayout);
        quantityPanelLayout.setHorizontalGroup(
            quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(quantityPanelLayout.createSequentialGroup()
                .addComponent(cancelOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proceedToOrderReviewBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(catalogTitle))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(catalogTitleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(quantityPanelTitleSeparator)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(searchField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, quantityPanelLayout.createSequentialGroup()
                            .addComponent(ascendBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(descendBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(quantityPanelTitle, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        quantityPanelLayout.setVerticalGroup(
            quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quantityPanelLayout.createSequentialGroup()
                .addComponent(quantityPanelTitle)
                .addGap(12, 12, 12)
                .addComponent(quantityPanelTitleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(catalogTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catalogTitleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ascendBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descendBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(quantityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelOrderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                    .addComponent(proceedToOrderReviewBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        catalogPanel.setVisible(true);

        listOfItems.setModel(allItems);
        jScrollPane1.setViewportView(listOfItems);

        proceedToQuantityReviewBtn.setText("Proceed to Quantity Review");
        proceedToQuantityReviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToQuantityReviewBtnActionPerformed(evt);
            }
        });

        ascendBtn.setText("Ascend");
        ascendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascendBtnActionPerformed(evt);
            }
        });

        descendBtn.setText("Descend");
        descendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descendBtnActionPerformed(evt);
            }
        });

        catalogPanelTitle.setText("Creating new order. Select items.");

        jLabel1.setText("Available Catalog");

        javax.swing.GroupLayout catalogPanelLayout = new javax.swing.GroupLayout(catalogPanel);
        catalogPanel.setLayout(catalogPanelLayout);
        catalogPanelLayout.setHorizontalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanelTitleSeperator)
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                            .addGroup(catalogPanelLayout.createSequentialGroup()
                                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ascendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(descendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(proceedToQuantityReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(catalogPanelLayout.createSequentialGroup()
                                .addComponent(catalogPanelTitle)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(catalogPanelLayout.createSequentialGroup()
                        .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(catalogPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(catalogPanelLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        catalogPanelLayout.setVerticalGroup(
            catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catalogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(catalogPanelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(catalogPanelTitleSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(ascendBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(catalogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descendBtn)
                    .addComponent(proceedToQuantityReviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 203, Short.MAX_VALUE)
                    .addComponent(defaultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(catalogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(quantityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(defaultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 390, Short.MAX_VALUE)))
        );
        jLayeredPane1.setLayer(defaultPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(quantityPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(catalogPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void proceedToQuantityReviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToQuantityReviewBtnActionPerformed
        setSelectedItem();

        for (int i = 0; i < allItems.size(); i++) {

            Item item = (Item) allItems.get(i);
            if (selectedItems.contains(item)) {
                itemQuantities.addElement(1);
                JCheckBox checkBox = new JCheckBox();
                checkBoxes.add(checkBox);
                checkBox.setSelected(true);
                checkBox.setVisible(true);
                checkBox.setEnabled(false);
                quantityPanel.add(checkBox);
                checkBox.setBounds(295, 190 + (i * 22), 40, 40);
            } else {
                itemQuantities.addElement(0);
            }
        }

        catalogPanel.setVisible(false);
        quantityPanel.setVisible(true);
        quantityPanel.revalidate();
    }//GEN-LAST:event_proceedToQuantityReviewBtnActionPerformed

    private void ascendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtnActionPerformed
        if(!ascending) {
            reverseList();
            descendBtn.setSelected(false);
            ascendBtn.setSelected(true);
            ascending = true;
        }
    }//GEN-LAST:event_ascendBtnActionPerformed

    private void descendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtnActionPerformed
        if(ascending) {
            reverseList();
            ascendBtn.setSelected(false);
            descendBtn.setSelected(true);
            ascending = false;
        }
    }//GEN-LAST:event_descendBtnActionPerformed

    private void alphabeticalSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphabeticalSortBtnActionPerformed
        Item[] list = new Item[allItems.size()];
        for(int i = 0; i < allItems.size(); i++) {
            list[i] = allItems.get(i);
        }        
        
        ArrayList<Item> sortedList = new ArrayList<Item>();
        for(int i = 0; i < list.length; i++) {
            sortedList.add(list[i]);
        }
        Collections.sort(sortedList);
        allItems.clear();
        sortedList.stream().forEach((item) -> {
            allItems.addElement(item);
        });
        
        categorySortBtn.setSelected(false);
        priceSortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
    }//GEN-LAST:event_alphabeticalSortBtnActionPerformed

    private void categorySortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySortBtnActionPerformed
        Item[] list = new Item[allItems.size()];
        for(int i = 0; i < allItems.size(); i++) {
            list[i] = allItems.get(i);
        }    
        ArrayList<Item> sortedList = new ArrayList<Item>();
        for(int i = 0; i < list.length; i++) {
            for(int j = 1; j < list.length -1; j++) {
                if(list[j-1].compareTo(list[j]) < 0) {
                    Item cpy = list[j-1];
                    list[j-1] = list[j];
                    list[j] = cpy;
                }
            }
        }
        for(int i = 0; i < list.length; i++) {
            sortedList.add(list[i]);
        }
        allItems.clear();
        sortedList.stream().forEach((item) -> {
            allItems.addElement(item);
        });
        
        alphabeticalSortBtn.setSelected(false);
        priceSortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
    }//GEN-LAST:event_categorySortBtnActionPerformed

    private void priceSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSortBtnActionPerformed
        Item[] list = new Item[allItems.size()];
        for(int i = 0; i < allItems.size(); i++) {
            list[i] = allItems.get(i);
        }    
        ArrayList<Item> sortedList = new ArrayList<Item>();
        for(int i = 0; i < list.length; i++) {
            for(int j = 1; j < list.length -1; j++) {
                if(list[j-1].getPrice() < list[j].getPrice()) {
                    Item cpy = list[j-1];
                    list[j-1] = list[j];
                    list[j] = cpy;
                }
            }
        }
        for(int i = 0; i < list.length; i++) {
            sortedList.add(list[i]);
        }
        allItems.clear();
        sortedList.stream().forEach((item) -> {
            allItems.addElement(item);
        });
        
        alphabeticalSortBtn.setSelected(false);
        categorySortBtn.setSelected(false);
        ascendBtnActionPerformed(null);
    }//GEN-LAST:event_priceSortBtnActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        String searchFieldText = searchField.getText();
        if (!searchFieldText.isEmpty()) {
            ArrayList<Item> searchedItems = new ArrayList<>();
            for(int i = 0; i < allItems.size(); i++) {
                if(allItems.get(i).getName().toLowerCase().contains(searchFieldText.toLowerCase())) {
                    searchedItems.add(allItems.get(i));
                }
            }
            allItems.clear();
            searchedItems.stream().forEach((item) -> {
                allItems.addElement(item);
            });
        } else {
            displayCatalog();
        }
    }//GEN-LAST:event_searchFieldKeyReleased

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void descendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descendBtn1ActionPerformed
        if(ascending1) {
            reverseList();
            ascendBtn1.setSelected(false);
            descendBtn1.setSelected(true);
            ascending1 = false;
        }
    }//GEN-LAST:event_descendBtn1ActionPerformed

    private void ascendBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascendBtn1ActionPerformed
        if(!ascending1) {
            reverseList();
            descendBtn1.setSelected(false);
            ascendBtn1.setSelected(true);
            ascending1 = true;
        }
    }//GEN-LAST:event_ascendBtn1ActionPerformed

    private void listOfSelectedItemQuantitiesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listOfSelectedItemQuantitiesValueChanged
        int selectedIndex = ((JList) evt.getSource()).getSelectedIndex();
        if (selectedItems.contains(allItems.get(selectedIndex))) {
            JTextField quantity = new JTextField();
            final JComponent[] inputs = new JComponent[]{
                new JLabel("Quantity"), quantity
            };
            JOptionPane.showMessageDialog(null, inputs, "Quantity Input", JOptionPane.PLAIN_MESSAGE);
            int quan = Integer.valueOf(quantity.getText());
            itemQuantities.set(selectedIndex, quan);
        }
    }//GEN-LAST:event_listOfSelectedItemQuantitiesValueChanged

    private void proceedToOrderReviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToOrderReviewBtnActionPerformed

        PlaceOrderUI ui = PlaceOrderUI.getInstance();

        for (int i = 0; i < selectedItems.size(); i++) {
            Item item = selectedItems.get(i);
            int index = allItems.indexOf(item);
            ui.addItem(item, (Integer) itemQuantities.get(index));
        }
        ui.setPosition(this.getX(), this.getY());
        ui.checkout();
        this.setVisible(false);
    }//GEN-LAST:event_proceedToOrderReviewBtnActionPerformed

    private void cancelOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderBtnActionPerformed
        selectedItems.clear();
        itemIcons.clear();
        itemQuantities.clear();
        allItems.clear();
        for(JCheckBox box : checkBoxes) {
            quantityPanel.remove(box);
        }
        checkBoxes.clear();

        quantityPanel.setVisible(false);
        catalogPanel.setVisible(true);
        this.setVisible(false);
        MainInterface ui = MainInterface.getInstance();
        ui.Run();
    }//GEN-LAST:event_cancelOrderBtnActionPerformed

    /**
     * Main execution method for UserInterface
     */
    @Override
    public void Run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatalogUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        CatalogUI that = this;

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                that.setVisible(true);

                catalog = Catalog.getCatalog();
                displayCatalog();          
            }
        });
    }

    /*Item getSelectedItem() {
     return someItem;
     }*/
    /**
     * Display the Catalog
     */
    public void displayCatalog() {
        ArrayList<Item> itemList = catalog.getListOfItems();
        System.out.println("catalog items: " + itemList);
        allItems.clear();
        itemList.stream().forEach((item) -> {
            allItems.addElement(item);
        });
        alphabeticalSortBtnActionPerformed(null);
        alphabeticalSortBtn.setSelected(true);
        ascendBtnActionPerformed(null);
        ascendBtn.setSelected(true);
    }

    /**
     * Close the Catalog
     */
    public void closeCatalog() {

    }

    /**
     * Set selected item
     */
    public void setSelectedItem() {
        int[] indices = listOfItems.getSelectedIndices();
        for (int i = 0; i < indices.length; i++) {
            System.out.println("Selected index: " + indices[i]);
            selectedItems.add((Item) allItems.get(indices[i]));
        }
    }

    public DefaultListModel getModel() {
        return allItems;
    }

    private void reverseList() {
        ArrayList<Item> reversedList = new ArrayList<>();
        for(int i = allItems.size() - 1; i >= 0; i--) {
            reversedList.add(allItems.get(i));
        }
        allItems.clear();
        reversedList.stream().forEach((item) -> {
            allItems.addElement(item);
        });
    }
    
    @Override
    public void setPosition(int x, int y) {
        this.setLocation(x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton alphabeticalSortBtn;
    private javax.swing.JToggleButton ascendBtn;
    private javax.swing.JToggleButton ascendBtn1;
    private javax.swing.JButton cancelOrderBtn;
    private javax.swing.JPanel catalogPanel;
    private javax.swing.JLabel catalogPanelTitle;
    private javax.swing.JSeparator catalogPanelTitleSeperator;
    private javax.swing.JLabel catalogTitle;
    private javax.swing.JSeparator catalogTitleSeparator;
    private javax.swing.JToggleButton categorySortBtn;
    private javax.swing.JPanel defaultPanel;
    private javax.swing.JToggleButton descendBtn;
    private javax.swing.JButton descendBtn1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listOfItems;
    private javax.swing.JList listOfSelectedItemNames;
    private javax.swing.JList listOfSelectedItemQuantities;
    private javax.swing.JToggleButton priceSortBtn;
    private javax.swing.JButton proceedToOrderReviewBtn;
    private javax.swing.JButton proceedToQuantityReviewBtn;
    private javax.swing.JPanel quantityPanel;
    private javax.swing.JLabel quantityPanelTitle;
    private javax.swing.JSeparator quantityPanelTitleSeparator;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
